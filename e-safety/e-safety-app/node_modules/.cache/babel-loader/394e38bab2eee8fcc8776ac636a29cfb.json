{"ast":null,"code":"import * as React from 'react';\nimport { forwardRef, useImperativeHandle, useRef, useEffect } from 'react';\nimport { applyReactStyle } from '../utils/apply-react-style';\nimport useControl from './use-control';\nconst GeolocateControl = forwardRef((props, ref) => {\n  const thisRef = useRef({\n    props\n  });\n  const ctrl = useControl(_ref => {\n    let {\n      mapLib\n    } = _ref;\n    const gc = new mapLib.GeolocateControl(props); // Hack: fix GeolocateControl reuse\n    // When using React strict mode, the component is mounted twice.\n    // GeolocateControl's UI creation is asynchronous. Removing and adding it back causes the UI to be initialized twice.\n\n    const setupUI = gc._setupUI;\n\n    gc._setupUI = args => {\n      if (!gc._container.hasChildNodes()) {\n        setupUI(args);\n      }\n    };\n\n    gc.on('geolocate', e => {\n      thisRef.current.props.onGeolocate?.(e);\n    });\n    gc.on('error', e => {\n      thisRef.current.props.onError?.(e);\n    });\n    gc.on('outofmaxbounds', e => {\n      thisRef.current.props.onOutOfMaxBounds?.(e);\n    });\n    gc.on('trackuserlocationstart', e => {\n      thisRef.current.props.onTrackUserLocationStart?.(e);\n    });\n    gc.on('trackuserlocationend', e => {\n      thisRef.current.props.onTrackUserLocationEnd?.(e);\n    });\n    return gc;\n  }, {\n    position: props.position\n  });\n  thisRef.current.props = props;\n  useImperativeHandle(ref, () => ({\n    trigger: () => ctrl.trigger()\n  }), []);\n  useEffect(() => {\n    // @ts-ignore\n    applyReactStyle(ctrl._container, props.style);\n  }, [props.style]);\n  return null;\n});\nGeolocateControl.displayName = 'GeolocateControl';\nexport default React.memo(GeolocateControl);","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,UAAR,EAAoBC,mBAApB,EAAyCC,MAAzC,EAAiDC,SAAjD,QAAiE,OAAjE;AACA,SAAQC,eAAR,QAA8B,4BAA9B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAkEA,MAAMC,gBAAgB,GAAGN,UAAU,CAA6C,CAACO,KAAD,EAAQC,GAAR,KAAe;EAC7F,MAAMC,OAAO,GAAGP,MAAM,CAAC;IAACK;EAAD,CAAD,CAAtB;EAEA,MAAMG,IAAI,GAAGL,UAAU,CACrB,QAAa;IAAA,IAAZ;MAACM;IAAD,CAAY;IACX,MAAMC,EAAE,GAAG,IAAID,MAAM,CAACL,gBAAX,CAA4BC,KAA5B,CAAX,CADW,CAGX;IACA;IACA;;IACA,MAAMM,OAAO,GAAGD,EAAE,CAACE,QAAnB;;IACAF,EAAE,CAACE,QAAH,GAAcC,IAAI,IAAG;MACnB,IAAI,CAACH,EAAE,CAACI,UAAH,CAAcC,aAAd,EAAL,EAAoC;QAClCJ,OAAO,CAACE,IAAD,CAAP;MACD;IACF,CAJD;;IAMAH,EAAE,CAACM,EAAH,CAAM,WAAN,EAAmBC,CAAC,IAAG;MACrBV,OAAO,CAACW,OAAR,CAAgBb,KAAhB,CAAsBc,WAAtB,GAAoCF,CAApC;IACD,CAFD;IAGAP,EAAE,CAACM,EAAH,CAAM,OAAN,EAAeC,CAAC,IAAG;MACjBV,OAAO,CAACW,OAAR,CAAgBb,KAAhB,CAAsBe,OAAtB,GAAgCH,CAAhC;IACD,CAFD;IAGAP,EAAE,CAACM,EAAH,CAAM,gBAAN,EAAwBC,CAAC,IAAG;MAC1BV,OAAO,CAACW,OAAR,CAAgBb,KAAhB,CAAsBgB,gBAAtB,GAAyCJ,CAAzC;IACD,CAFD;IAGAP,EAAE,CAACM,EAAH,CAAM,wBAAN,EAAgCC,CAAC,IAAG;MAClCV,OAAO,CAACW,OAAR,CAAgBb,KAAhB,CAAsBiB,wBAAtB,GAAiDL,CAAjD;IACD,CAFD;IAGAP,EAAE,CAACM,EAAH,CAAM,sBAAN,EAA8BC,CAAC,IAAG;MAChCV,OAAO,CAACW,OAAR,CAAgBb,KAAhB,CAAsBkB,sBAAtB,GAA+CN,CAA/C;IACD,CAFD;IAIA,OAAOP,EAAP;EACD,CA/BoB,EAgCrB;IAACc,QAAQ,EAAEnB,KAAK,CAACmB;EAAjB,CAhCqB,CAAvB;EAmCAjB,OAAO,CAACW,OAAR,CAAgBb,KAAhB,GAAwBA,KAAxB;EAEAN,mBAAmB,CACjBO,GADiB,EAEjB,OAAO;IACLmB,OAAO,EAAE,MAAMjB,IAAI,CAACiB,OAAL;EADV,CAAP,CAFiB,EAKjB,EALiB,CAAnB;EAQAxB,SAAS,CAAC,MAAK;IACb;IACAC,eAAe,CAACM,IAAI,CAACM,UAAN,EAAkBT,KAAK,CAACqB,KAAxB,CAAf;EACD,CAHQ,EAGN,CAACrB,KAAK,CAACqB,KAAP,CAHM,CAAT;EAKA,OAAO,IAAP;AACD,CAtDkC,CAAnC;AAwDAtB,gBAAgB,CAACuB,WAAjB,GAA+B,kBAA/B;AAEA,eAAe9B,KAAK,CAAC+B,IAAN,CAAWxB,gBAAX,CAAf","names":["React","forwardRef","useImperativeHandle","useRef","useEffect","applyReactStyle","useControl","GeolocateControl","props","ref","thisRef","ctrl","mapLib","gc","setupUI","_setupUI","args","_container","hasChildNodes","on","e","current","onGeolocate","onError","onOutOfMaxBounds","onTrackUserLocationStart","onTrackUserLocationEnd","position","trigger","style","displayName","memo"],"sources":["/Users/yuemincao/Documents/INFO442/e-team/e-safety/node_modules/react-map-gl/src/components/geolocate-control.ts"],"sourcesContent":["import * as React from 'react';\nimport {forwardRef, useImperativeHandle, useRef, useEffect} from 'react';\nimport {applyReactStyle} from '../utils/apply-react-style';\nimport useControl from './use-control';\n\nimport type {\n  ControlPosition,\n  PositionOptions,\n  FitBoundsOptions,\n  MapboxGeolocateControl,\n  GeolocateEvent,\n  GeolocateResultEvent,\n  GeolocateErrorEvent\n} from '../types';\n\nexport type GeolocateControlRef = {\n  /** Triggers a geolocate event */\n  trigger: () => boolean;\n};\n\nexport type GeolocateControlProps = {\n  /**\n   * A Geolocation API PositionOptions object.\n   * @default {enableHighAccuracy:false,timeout:6000}\n   */\n  positionOptions?: PositionOptions;\n  /** A Map#fitBounds options object to use when the map is panned and zoomed to the user's location.\n   * @default {maxZoom:15}\n   */\n  fitBoundsOptions?: FitBoundsOptions;\n  /** If true the GeolocateControl becomes a toggle button and when active the map will receive\n   * updates to the user's location as it changes. Default false.\n   * @default false\n   */\n  trackUserLocation?: boolean;\n  /** Draw a transparent circle will be drawn around the user location indicating the accuracy\n   * (95% confidence level) of the user's location. Set to false to disable.\n   * This only has effect if `showUserLocation` is true.\n   * @default true\n   */\n  showAccuracyCircle?: boolean;\n  /**\n   * Show a dot on the map at the user's location. Set to false to disable.\n   * @default true\n   */\n  showUserLocation?: boolean;\n  /** If true an arrow will be drawn next to the user location dot indicating the device's heading.\n   * This only has affect when `trackUserLocation` is true. Default false.\n   * @default false\n   */\n  showUserHeading?: boolean;\n  /** Placement of the control relative to the map. */\n  position?: ControlPosition;\n  /** CSS style override, applied to the control's container */\n  style?: React.CSSProperties;\n\n  /** Called on each Geolocation API position update that returned as success. */\n  onGeolocate?: (e: GeolocateResultEvent) => void;\n  /** Called on each Geolocation API position update that returned as an error. */\n  onError?: (e: GeolocateErrorEvent) => void;\n  /** Called on each Geolocation API position update that returned as success but user position\n   * is out of map `maxBounds`. */\n  onOutOfMaxBounds?: (e: GeolocateResultEvent) => void;\n  /** Called when the GeolocateControl changes to the active lock state. */\n  onTrackUserLocationStart?: (e: GeolocateEvent) => void;\n  /** Called when the GeolocateControl changes to the background state. */\n  onTrackUserLocationEnd?: (e: GeolocateEvent) => void;\n};\n\nconst GeolocateControl = forwardRef<GeolocateControlRef, GeolocateControlProps>((props, ref) => {\n  const thisRef = useRef({props});\n\n  const ctrl = useControl<MapboxGeolocateControl>(\n    ({mapLib}) => {\n      const gc = new mapLib.GeolocateControl(props);\n\n      // Hack: fix GeolocateControl reuse\n      // When using React strict mode, the component is mounted twice.\n      // GeolocateControl's UI creation is asynchronous. Removing and adding it back causes the UI to be initialized twice.\n      const setupUI = gc._setupUI;\n      gc._setupUI = args => {\n        if (!gc._container.hasChildNodes()) {\n          setupUI(args);\n        }\n      };\n\n      gc.on('geolocate', e => {\n        thisRef.current.props.onGeolocate?.(e as GeolocateResultEvent);\n      });\n      gc.on('error', e => {\n        thisRef.current.props.onError?.(e as GeolocateErrorEvent);\n      });\n      gc.on('outofmaxbounds', e => {\n        thisRef.current.props.onOutOfMaxBounds?.(e as GeolocateResultEvent);\n      });\n      gc.on('trackuserlocationstart', e => {\n        thisRef.current.props.onTrackUserLocationStart?.(e as GeolocateEvent);\n      });\n      gc.on('trackuserlocationend', e => {\n        thisRef.current.props.onTrackUserLocationEnd?.(e as GeolocateEvent);\n      });\n\n      return gc;\n    },\n    {position: props.position}\n  );\n\n  thisRef.current.props = props;\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      trigger: () => ctrl.trigger()\n    }),\n    []\n  );\n\n  useEffect(() => {\n    // @ts-ignore\n    applyReactStyle(ctrl._container, props.style);\n  }, [props.style]);\n\n  return null;\n});\n\nGeolocateControl.displayName = 'GeolocateControl';\n\nexport default React.memo(GeolocateControl);\n"]},"metadata":{},"sourceType":"module"}