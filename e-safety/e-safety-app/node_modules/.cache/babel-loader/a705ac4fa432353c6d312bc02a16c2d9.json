{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport Viewport from './viewport';\nimport { zoomToScale, pixelsToWorld, lngLatToWorld, worldToLngLat, getProjectionMatrix, getDistanceScales, getViewMatrix } from './web-mercator-utils';\nimport _fitBounds from './fit-bounds';\nimport * as vec2 from 'gl-matrix/vec2';\n\nvar WebMercatorViewport = function (_Viewport) {\n  _inherits(WebMercatorViewport, _Viewport);\n\n  function WebMercatorViewport() {\n    var _this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        width = _ref.width,\n        height = _ref.height,\n        _ref$latitude = _ref.latitude,\n        latitude = _ref$latitude === void 0 ? 0 : _ref$latitude,\n        _ref$longitude = _ref.longitude,\n        longitude = _ref$longitude === void 0 ? 0 : _ref$longitude,\n        _ref$zoom = _ref.zoom,\n        zoom = _ref$zoom === void 0 ? 0 : _ref$zoom,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? 0 : _ref$pitch,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? 0 : _ref$bearing,\n        _ref$altitude = _ref.altitude,\n        altitude = _ref$altitude === void 0 ? 1.5 : _ref$altitude,\n        nearZMultiplier = _ref.nearZMultiplier,\n        farZMultiplier = _ref.farZMultiplier;\n\n    _classCallCheck(this, WebMercatorViewport);\n\n    width = width || 1;\n    height = height || 1;\n    var scale = zoomToScale(zoom);\n    altitude = Math.max(0.75, altitude);\n    var center = lngLatToWorld([longitude, latitude], scale);\n    center[2] = 0;\n    var projectionMatrix = getProjectionMatrix({\n      width: width,\n      height: height,\n      pitch: pitch,\n      bearing: bearing,\n      altitude: altitude,\n      nearZMultiplier: nearZMultiplier || 1 / height,\n      farZMultiplier: farZMultiplier || 1.01\n    });\n    var viewMatrix = getViewMatrix({\n      height: height,\n      center: center,\n      pitch: pitch,\n      bearing: bearing,\n      altitude: altitude,\n      flipY: true\n    });\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebMercatorViewport).call(this, {\n      width: width,\n      height: height,\n      viewMatrix: viewMatrix,\n      projectionMatrix: projectionMatrix\n    }));\n    _this.latitude = latitude;\n    _this.longitude = longitude;\n    _this.zoom = zoom;\n    _this.pitch = pitch;\n    _this.bearing = bearing;\n    _this.altitude = altitude;\n    _this.scale = scale;\n    _this.center = center;\n    _this.pixelsPerMeter = getDistanceScales(_assertThisInitialized(_assertThisInitialized(_this))).pixelsPerMeter[2];\n    Object.freeze(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(WebMercatorViewport, [{\n    key: \"projectFlat\",\n    value: function projectFlat(lngLat) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;\n      return lngLatToWorld(lngLat, scale);\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(xy) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;\n      return worldToLngLat(xy, scale);\n    }\n  }, {\n    key: \"getMapCenterByLngLatPosition\",\n    value: function getMapCenterByLngLatPosition(_ref2) {\n      var lngLat = _ref2.lngLat,\n          pos = _ref2.pos;\n      var fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n      var toLocation = lngLatToWorld(lngLat, this.scale);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n      return worldToLngLat(newCenter, this.scale);\n    }\n  }, {\n    key: \"getLocationAtPoint\",\n    value: function getLocationAtPoint(_ref3) {\n      var lngLat = _ref3.lngLat,\n          pos = _ref3.pos;\n      return this.getMapCenterByLngLatPosition({\n        lngLat: lngLat,\n        pos: pos\n      });\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var width = this.width,\n          height = this.height;\n\n      var _fitBounds2 = _fitBounds(Object.assign({\n        width: width,\n        height: height,\n        bounds: bounds\n      }, options)),\n          longitude = _fitBounds2.longitude,\n          latitude = _fitBounds2.latitude,\n          zoom = _fitBounds2.zoom;\n\n      return new WebMercatorViewport({\n        width: width,\n        height: height,\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom\n      });\n    }\n  }]);\n\n  return WebMercatorViewport;\n}(Viewport);\n\nexport { WebMercatorViewport as default };","map":{"version":3,"mappings":"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","names":["Viewport","zoomToScale","pixelsToWorld","lngLatToWorld","worldToLngLat","getProjectionMatrix","getDistanceScales","getViewMatrix","fitBounds","vec2","WebMercatorViewport","width","height","latitude","longitude","zoom","pitch","bearing","altitude","nearZMultiplier","farZMultiplier","_classCallCheck","scale","Math","max","center","projectionMatrix","viewMatrix","flipY","_this","pixelsPerMeter","Object","freeze","lngLat","xy","pos","fromLocation","pixelUnprojectionMatrix","toLocation","translate","add","negate","newCenter","getMapCenterByLngLatPosition","bounds","options","assign"],"sources":["/Users/yuemincao/Documents/INFO442/e-team/e-safety/node_modules/viewport-mercator-project/src/web-mercator-viewport.js"],"sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport Viewport from './viewport';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\n\nimport * as vec2 from 'gl-matrix/vec2';\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   *\n   * @class\n   * @param {Object} opt - options\n   *\n   * @param {Number} opt.width=1 - Width of \"viewport\" or window\n   * @param {Number} opt.height=1 - Height of \"viewport\" or window\n   * @param {Number} opt.scale=1 - Either use scale or zoom\n   * @param {Number} opt.pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param {Number} opt.bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param {Number} opt.altitude= - Altitude of camera in screen units\n   *\n   * Web mercator projection short-hand parameters\n   * @param {Number} opt.latitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.longitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.zoom - Scale = Math.pow(2,zoom) on map (alternative to opt.scale)\n\n   * Notes:\n   *  - Only one of center or [latitude, longitude] can be specified\n   *  - [latitude, longitude] can only be specified when \"mercator\" is true\n   *  - Altitude has a default value that matches assumptions in mapbox-gl\n   *  - width and height are forced to 1 if supplied as 0, to avoid\n   *    division by zero. This is intended to reduce the burden of apps to\n   *    to check values before instantiating a Viewport.\n   */\n  /* eslint-disable complexity */\n  constructor({\n    // Map state\n    width,\n    height,\n    latitude = 0,\n    longitude = 0,\n    zoom = 0,\n    pitch = 0,\n    bearing = 0,\n    altitude = 1.5,\n    nearZMultiplier,\n    farZMultiplier\n  } = {}) {\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const center = lngLatToWorld([longitude, latitude], scale);\n    center[2] = 0;\n\n    const projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      bearing,\n      altitude,\n      nearZMultiplier: nearZMultiplier || (1 / height),\n      farZMultiplier: farZMultiplier || 1.01\n    });\n\n    const viewMatrix = getViewMatrix({\n      height,\n      center,\n      pitch,\n      bearing,\n      altitude,\n      flipY: true\n    });\n\n    super({width, height, viewMatrix, projectionMatrix});\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n\n    this.scale = scale;\n    this.center = center;\n    this.pixelsPerMeter = getDistanceScales(this).pixelsPerMeter[2];\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity */\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   *\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(lngLat, scale = this.scale) {\n    return lngLatToWorld(lngLat, scale);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   *\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xy, scale = this.scale) {\n    return worldToLngLat(xy, scale);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen\n   * point [x, y]\n   *\n   * @param {Array} lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param {Array} pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return {Array} [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat, this.scale);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return worldToLngLat(newCenter, this.scale);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}