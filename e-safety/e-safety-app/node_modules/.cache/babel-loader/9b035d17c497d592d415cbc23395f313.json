{"ast":null,"code":"import * as React from 'react';\nimport { useState, useCallback, useMemo, useContext } from 'react';\nimport { MapContext } from './map';\nexport const MountedMapsContext = React.createContext(null);\nexport const MapProvider = props => {\n  const [maps, setMaps] = useState({});\n  const onMapMount = useCallback(function (map) {\n    let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    setMaps(currMaps => {\n      if (id === 'current') {\n        throw new Error(\"'current' cannot be used as map id\");\n      }\n\n      if (currMaps[id]) {\n        throw new Error(`Multiple maps with the same id: ${id}`);\n      }\n\n      return { ...currMaps,\n        [id]: map\n      };\n    });\n  }, []);\n  const onMapUnmount = useCallback(function () {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n    setMaps(currMaps => {\n      if (currMaps[id]) {\n        const nextMaps = { ...currMaps\n        };\n        delete nextMaps[id];\n        return nextMaps;\n      }\n\n      return currMaps;\n    });\n  }, []);\n  return React.createElement(MountedMapsContext.Provider, {\n    value: {\n      maps,\n      onMapMount,\n      onMapUnmount\n    }\n  }, props.children);\n};\nexport function useMap() {\n  const maps = useContext(MountedMapsContext)?.maps;\n  const currentMap = useContext(MapContext);\n  const mapsWithCurrent = useMemo(() => {\n    return { ...maps,\n      current: currentMap?.map\n    };\n  }, [maps, currentMap]);\n  return mapsWithCurrent;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,QAAR,EAAkBC,WAAlB,EAA+BC,OAA/B,EAAwCC,UAAxC,QAAyD,OAAzD;AAGA,SAAQC,UAAR,QAAyB,OAAzB;AAQA,OAAO,MAAMC,kBAAkB,GAAGN,KAAK,CAACO,aAAN,CAA6C,IAA7C,CAA3B;AAEP,OAAO,MAAMC,WAAW,GAAiBC,KAAK,IAAG;EAC/C,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAyB,EAAzB,CAAhC;EAEA,MAAMW,UAAU,GAAGV,WAAW,CAAC,UAACW,GAAD,EAAwC;IAAA,IAA1BC,EAA0B,uEAAb,SAAa;IACrEH,OAAO,CAACI,QAAQ,IAAG;MACjB,IAAID,EAAE,KAAK,SAAX,EAAsB;QACpB,MAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;MACD;;MACD,IAAID,QAAQ,CAACD,EAAD,CAAZ,EAAkB;QAChB,MAAM,IAAIE,KAAJ,CAAU,mCAAmCF,EAAE,EAA/C,CAAN;MACD;;MACD,OAAO,EAAC,GAAGC,QAAJ;QAAc,CAACD,EAAD,GAAMD;MAApB,CAAP;IACD,CARM,CAAP;EASD,CAV6B,EAU3B,EAV2B,CAA9B;EAYA,MAAMI,YAAY,GAAGf,WAAW,CAAC,YAA2B;IAAA,IAA1BY,EAA0B,uEAAb,SAAa;IAC1DH,OAAO,CAACI,QAAQ,IAAG;MACjB,IAAIA,QAAQ,CAACD,EAAD,CAAZ,EAAkB;QAChB,MAAMI,QAAQ,GAAG,EAAC,GAAGH;QAAJ,CAAjB;QACA,OAAOG,QAAQ,CAACJ,EAAD,CAAf;QACA,OAAOI,QAAP;MACD;;MACD,OAAOH,QAAP;IACD,CAPM,CAAP;EAQD,CAT+B,EAS7B,EAT6B,CAAhC;EAWA,OACEf,oBAACM,kBAAkB,CAACa,QAApB,EAA4B;IAC1BC,KAAK,EAAE;MACLV,IADK;MAELE,UAFK;MAGLK;IAHK;EADmB,CAA5B,EAOGR,KAAK,CAACY,QAPT,CADF;AAWD,CArCM;AAuCP,OAAM,SAAUC,MAAV,GAAgB;EACpB,MAAMZ,IAAI,GAAGN,UAAU,CAACE,kBAAD,CAAV,EAAgCI,IAA7C;EACA,MAAMa,UAAU,GAAGnB,UAAU,CAACC,UAAD,CAA7B;EAEA,MAAMmB,eAAe,GAAGrB,OAAO,CAAC,MAAK;IACnC,OAAO,EAAC,GAAGO,IAAJ;MAAUe,OAAO,EAAEF,UAAU,EAAEV;IAA/B,CAAP;EACD,CAF8B,EAE5B,CAACH,IAAD,EAAOa,UAAP,CAF4B,CAA/B;EAIA,OAAOC,eAAP;AACD","names":["React","useState","useCallback","useMemo","useContext","MapContext","MountedMapsContext","createContext","MapProvider","props","maps","setMaps","onMapMount","map","id","currMaps","Error","onMapUnmount","nextMaps","Provider","value","children","useMap","currentMap","mapsWithCurrent","current"],"sources":["/Users/yuemincao/Documents/INFO442/e-team/e-safety/node_modules/react-map-gl/src/components/use-map.tsx"],"sourcesContent":["import * as React from 'react';\nimport {useState, useCallback, useMemo, useContext} from 'react';\n\nimport {MapRef} from '../mapbox/create-ref';\nimport {MapContext} from './map';\n\ntype MountedMapsContextValue = {\n  maps: {[id: string]: MapRef};\n  onMapMount: (map: MapRef, id: string) => void;\n  onMapUnmount: (id: string) => void;\n};\n\nexport const MountedMapsContext = React.createContext<MountedMapsContextValue>(null);\n\nexport const MapProvider: React.FC<{}> = props => {\n  const [maps, setMaps] = useState<{[id: string]: MapRef}>({});\n\n  const onMapMount = useCallback((map: MapRef, id: string = 'default') => {\n    setMaps(currMaps => {\n      if (id === 'current') {\n        throw new Error(\"'current' cannot be used as map id\");\n      }\n      if (currMaps[id]) {\n        throw new Error(`Multiple maps with the same id: ${id}`);\n      }\n      return {...currMaps, [id]: map};\n    });\n  }, []);\n\n  const onMapUnmount = useCallback((id: string = 'default') => {\n    setMaps(currMaps => {\n      if (currMaps[id]) {\n        const nextMaps = {...currMaps};\n        delete nextMaps[id];\n        return nextMaps;\n      }\n      return currMaps;\n    });\n  }, []);\n\n  return (\n    <MountedMapsContext.Provider\n      value={{\n        maps,\n        onMapMount,\n        onMapUnmount\n      }}\n    >\n      {props.children}\n    </MountedMapsContext.Provider>\n  );\n};\n\nexport function useMap(): {current?: MapRef; [id: string]: MapRef | undefined} {\n  const maps = useContext(MountedMapsContext)?.maps;\n  const currentMap = useContext(MapContext);\n\n  const mapsWithCurrent = useMemo(() => {\n    return {...maps, current: currentMap?.map};\n  }, [maps, currentMap]);\n\n  return mapsWithCurrent;\n}\n"]},"metadata":{},"sourceType":"module"}