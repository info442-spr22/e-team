{"ast":null,"code":"import { Manager } from './utils/hammer';\nimport WheelInput from './inputs/wheel-input';\nimport MoveInput from './inputs/move-input';\nimport KeyInput from './inputs/key-input';\nimport ContextmenuInput from './inputs/contextmenu-input';\nimport EventRegistrar from './utils/event-registrar';\nimport { BASIC_EVENT_ALIASES, EVENT_RECOGNIZER_MAP, GESTURE_EVENT_ALIASES, RECOGNIZERS, RECOGNIZER_COMPATIBLE_MAP, RECOGNIZER_FALLBACK_MAP } from './constants';\nconst DEFAULT_OPTIONS = {\n  events: null,\n  recognizers: null,\n  recognizerOptions: {},\n  Manager,\n  touchAction: 'none',\n  tabIndex: 0\n};\nexport default class EventManager {\n  constructor() {\n    let element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n    this.events = new Map();\n    this._onBasicInput = this._onBasicInput.bind(this);\n    this._onOtherEvent = this._onOtherEvent.bind(this);\n    this.setElement(element);\n    const {\n      events\n    } = options;\n\n    if (events) {\n      this.on(events);\n    }\n  }\n\n  setElement(element) {\n    if (this.element) {\n      this.destroy();\n    }\n\n    this.element = element;\n\n    if (!element) {\n      return;\n    }\n\n    const {\n      options\n    } = this;\n    const ManagerClass = options.Manager;\n    this.manager = new ManagerClass(element, {\n      touchAction: options.touchAction,\n      recognizers: options.recognizers || RECOGNIZERS\n    }).on('hammer.input', this._onBasicInput);\n\n    if (!options.recognizers) {\n      Object.keys(RECOGNIZER_COMPATIBLE_MAP).forEach(name => {\n        const recognizer = this.manager.get(name);\n\n        if (recognizer) {\n          RECOGNIZER_COMPATIBLE_MAP[name].forEach(otherName => {\n            recognizer.recognizeWith(otherName);\n          });\n        }\n      });\n    }\n\n    for (const recognizerName in options.recognizerOptions) {\n      const recognizer = this.manager.get(recognizerName);\n\n      if (recognizer) {\n        const recognizerOption = options.recognizerOptions[recognizerName];\n        delete recognizerOption.enable;\n        recognizer.set(recognizerOption);\n      }\n    }\n\n    this.wheelInput = new WheelInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.moveInput = new MoveInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.keyInput = new KeyInput(element, this._onOtherEvent, {\n      enable: false,\n      tabIndex: options.tabIndex\n    });\n    this.contextmenuInput = new ContextmenuInput(element, this._onOtherEvent, {\n      enable: false\n    });\n\n    for (const [eventAlias, eventRegistrar] of this.events) {\n      if (!eventRegistrar.isEmpty()) {\n        this._toggleRecognizer(eventRegistrar.recognizerName, true);\n\n        this.manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n  }\n\n  destroy() {\n    if (this.element) {\n      this.wheelInput.destroy();\n      this.moveInput.destroy();\n      this.keyInput.destroy();\n      this.contextmenuInput.destroy();\n      this.manager.destroy();\n      this.wheelInput = null;\n      this.moveInput = null;\n      this.keyInput = null;\n      this.contextmenuInput = null;\n      this.manager = null;\n      this.element = null;\n    }\n  }\n\n  on(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false);\n  }\n\n  once(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, true);\n  }\n\n  watch(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false, true);\n  }\n\n  off(event, handler) {\n    this._removeEventHandler(event, handler);\n  }\n\n  _toggleRecognizer(name, enabled) {\n    const {\n      manager\n    } = this;\n\n    if (!manager) {\n      return;\n    }\n\n    const recognizer = manager.get(name);\n\n    if (recognizer && recognizer.options.enable !== enabled) {\n      recognizer.set({\n        enable: enabled\n      });\n      const fallbackRecognizers = RECOGNIZER_FALLBACK_MAP[name];\n\n      if (fallbackRecognizers && !this.options.recognizers) {\n        fallbackRecognizers.forEach(otherName => {\n          const otherRecognizer = manager.get(otherName);\n\n          if (enabled) {\n            otherRecognizer.requireFailure(name);\n            recognizer.dropRequireFailure(otherName);\n          } else {\n            otherRecognizer.dropRequireFailure(name);\n          }\n        });\n      }\n    }\n\n    this.wheelInput.enableEventType(name, enabled);\n    this.moveInput.enableEventType(name, enabled);\n    this.keyInput.enableEventType(name, enabled);\n    this.contextmenuInput.enableEventType(name, enabled);\n  }\n\n  _addEventHandler(event, handler, opts, once, passive) {\n    if (typeof event !== 'string') {\n      opts = handler;\n\n      for (const eventName in event) {\n        this._addEventHandler(eventName, event[eventName], opts, once, passive);\n      }\n\n      return;\n    }\n\n    const {\n      manager,\n      events\n    } = this;\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n    let eventRegistrar = events.get(eventAlias);\n\n    if (!eventRegistrar) {\n      eventRegistrar = new EventRegistrar(this);\n      events.set(eventAlias, eventRegistrar);\n      eventRegistrar.recognizerName = EVENT_RECOGNIZER_MAP[eventAlias] || eventAlias;\n\n      if (manager) {\n        manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n\n    eventRegistrar.add(event, handler, opts, once, passive);\n\n    if (!eventRegistrar.isEmpty()) {\n      this._toggleRecognizer(eventRegistrar.recognizerName, true);\n    }\n  }\n\n  _removeEventHandler(event, handler) {\n    if (typeof event !== 'string') {\n      for (const eventName in event) {\n        this._removeEventHandler(eventName, event[eventName]);\n      }\n\n      return;\n    }\n\n    const {\n      events\n    } = this;\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n    const eventRegistrar = events.get(eventAlias);\n\n    if (!eventRegistrar) {\n      return;\n    }\n\n    eventRegistrar.remove(event, handler);\n\n    if (eventRegistrar.isEmpty()) {\n      const {\n        recognizerName\n      } = eventRegistrar;\n      let isRecognizerUsed = false;\n\n      for (const eh of events.values()) {\n        if (eh.recognizerName === recognizerName && !eh.isEmpty()) {\n          isRecognizerUsed = true;\n          break;\n        }\n      }\n\n      if (!isRecognizerUsed) {\n        this._toggleRecognizer(recognizerName, false);\n      }\n    }\n  }\n\n  _onBasicInput(event) {\n    const {\n      srcEvent\n    } = event;\n    const alias = BASIC_EVENT_ALIASES[srcEvent.type];\n\n    if (alias) {\n      this.manager.emit(alias, event);\n    }\n  }\n\n  _onOtherEvent(event) {\n    this.manager.emit(event.type, event);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Manager","WheelInput","MoveInput","KeyInput","ContextmenuInput","EventRegistrar","BASIC_EVENT_ALIASES","EVENT_RECOGNIZER_MAP","GESTURE_EVENT_ALIASES","RECOGNIZERS","RECOGNIZER_COMPATIBLE_MAP","RECOGNIZER_FALLBACK_MAP","DEFAULT_OPTIONS","events","recognizers","recognizerOptions","touchAction","tabIndex","EventManager","constructor","element","options","Object","assign","Map","_onBasicInput","bind","_onOtherEvent","setElement","on","destroy","ManagerClass","manager","keys","forEach","name","recognizer","get","otherName","recognizeWith","recognizerName","recognizerOption","enable","set","wheelInput","moveInput","keyInput","contextmenuInput","eventAlias","eventRegistrar","isEmpty","_toggleRecognizer","handleEvent","event","handler","opts","_addEventHandler","once","watch","off","_removeEventHandler","enabled","fallbackRecognizers","otherRecognizer","requireFailure","dropRequireFailure","enableEventType","passive","eventName","add","remove","isRecognizerUsed","eh","values","srcEvent","alias","type","emit"],"sources":["/Users/yuemincao/Documents/INFO442/e-team/e-safety/node_modules/mjolnir.js/src/event-manager.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Manager} from './utils/hammer';\n\nimport WheelInput from './inputs/wheel-input';\nimport MoveInput from './inputs/move-input';\nimport KeyInput from './inputs/key-input';\nimport ContextmenuInput from './inputs/contextmenu-input';\n\nimport EventRegistrar from './utils/event-registrar';\n\nimport {\n  BASIC_EVENT_ALIASES,\n  EVENT_RECOGNIZER_MAP,\n  GESTURE_EVENT_ALIASES,\n  RECOGNIZERS,\n  RECOGNIZER_COMPATIBLE_MAP,\n  RECOGNIZER_FALLBACK_MAP\n} from './constants';\n\nconst DEFAULT_OPTIONS = {\n  // event handlers\n  events: null,\n  // custom recognizers\n  recognizers: null,\n  recognizerOptions: {},\n  // Manager class\n  Manager,\n  // allow browser default touch action\n  // https://github.com/uber/react-map-gl/issues/506\n  touchAction: 'none',\n  tabIndex: 0\n};\n\n// Unified API for subscribing to events about both\n// basic input events (e.g. 'mousemove', 'touchstart', 'wheel')\n// and gestural input (e.g. 'click', 'tap', 'panstart').\n// Delegates gesture related event registration and handling to Hammer.js.\nexport default class EventManager {\n  constructor(element = null, options = {}) {\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n    this.events = new Map();\n\n    this._onBasicInput = this._onBasicInput.bind(this);\n    this._onOtherEvent = this._onOtherEvent.bind(this);\n\n    this.setElement(element);\n\n    // Register all passed events.\n    const {events} = options;\n    if (events) {\n      this.on(events);\n    }\n  }\n\n  setElement(element) {\n    if (this.element) {\n      // unregister all events\n      this.destroy();\n    }\n    this.element = element;\n    if (!element) {\n      return;\n    }\n\n    const {options} = this;\n    const ManagerClass = options.Manager;\n\n    this.manager = new ManagerClass(element, {\n      touchAction: options.touchAction,\n      recognizers: options.recognizers || RECOGNIZERS\n    }).on('hammer.input', this._onBasicInput);\n\n    if (!options.recognizers) {\n      // Set default recognize withs\n      // http://hammerjs.github.io/recognize-with/\n      Object.keys(RECOGNIZER_COMPATIBLE_MAP).forEach(name => {\n        const recognizer = this.manager.get(name);\n        if (recognizer) {\n          RECOGNIZER_COMPATIBLE_MAP[name].forEach(otherName => {\n            recognizer.recognizeWith(otherName);\n          });\n        }\n      });\n    }\n\n    // Set recognizer options\n    for (const recognizerName in options.recognizerOptions) {\n      const recognizer = this.manager.get(recognizerName);\n      if (recognizer) {\n        const recognizerOption = options.recognizerOptions[recognizerName];\n        // `enable` is managed by the event registrations\n        delete recognizerOption.enable;\n        recognizer.set(recognizerOption);\n      }\n    }\n\n    // Handle events not handled by Hammer.js:\n    // - mouse wheel\n    // - pointer/touch/mouse move\n    this.wheelInput = new WheelInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.moveInput = new MoveInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.keyInput = new KeyInput(element, this._onOtherEvent, {\n      enable: false,\n      tabIndex: options.tabIndex\n    });\n    this.contextmenuInput = new ContextmenuInput(element, this._onOtherEvent, {\n      enable: false\n    });\n\n    // Register all existing events\n    for (const [eventAlias, eventRegistrar] of this.events) {\n      if (!eventRegistrar.isEmpty()) {\n        // Enable recognizer for this event.\n        this._toggleRecognizer(eventRegistrar.recognizerName, true);\n        this.manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n  }\n\n  // Tear down internal event management implementations.\n  destroy() {\n    if (this.element) {\n      // wheelInput etc. are created in setElement() and therefore\n      // cannot exist if there is no element\n      this.wheelInput.destroy();\n      this.moveInput.destroy();\n      this.keyInput.destroy();\n      this.contextmenuInput.destroy();\n      this.manager.destroy();\n\n      this.wheelInput = null;\n      this.moveInput = null;\n      this.keyInput = null;\n      this.contextmenuInput = null;\n      this.manager = null;\n      this.element = null;\n    }\n  }\n\n  // Register an event handler function to be called on `event`.\n  on(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false);\n  }\n\n  // Register an event handler function to be called on `event`, then remove it\n  once(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, true);\n  }\n\n  // Register an event handler function to be called on `event`\n  // This handler does not ask the event to be recognized at all times.\n  // Instead, it only \"intercepts\" the event if some other handler is getting it.\n  watch(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false, true);\n  }\n\n  /**\n   * Deregister a previously-registered event handler.\n   * @param {string|Object} event   An event name (String) or map of event names to handlers\n   * @param {Function} [handler]    The function to be called on `event`.\n   */\n  off(event, handler) {\n    this._removeEventHandler(event, handler);\n  }\n\n  /*\n   * Enable/disable recognizer for the given event\n   */\n  _toggleRecognizer(name, enabled) {\n    const {manager} = this;\n    if (!manager) {\n      return;\n    }\n    const recognizer = manager.get(name);\n    if (recognizer && recognizer.options.enable !== enabled) {\n      recognizer.set({enable: enabled});\n\n      const fallbackRecognizers = RECOGNIZER_FALLBACK_MAP[name];\n      if (fallbackRecognizers && !this.options.recognizers) {\n        // Set default require failures\n        // http://hammerjs.github.io/require-failure/\n        fallbackRecognizers.forEach(otherName => {\n          const otherRecognizer = manager.get(otherName);\n          if (enabled) {\n            // Wait for this recognizer to fail\n            otherRecognizer.requireFailure(name);\n            /**\n             * This seems to be a bug in hammerjs:\n             * requireFailure() adds both ways\n             * dropRequireFailure() only drops one way\n             * https://github.com/hammerjs/hammer.js/blob/master/src/recognizerjs/\n               recognizer-constructor.js#L136\n             */\n            recognizer.dropRequireFailure(otherName);\n          } else {\n            // Do not wait for this recognizer to fail\n            otherRecognizer.dropRequireFailure(name);\n          }\n        });\n      }\n    }\n    this.wheelInput.enableEventType(name, enabled);\n    this.moveInput.enableEventType(name, enabled);\n    this.keyInput.enableEventType(name, enabled);\n    this.contextmenuInput.enableEventType(name, enabled);\n  }\n\n  /**\n   * Process the event registration for a single event + handler.\n   */\n  _addEventHandler(event, handler, opts, once, passive) {\n    if (typeof event !== 'string') {\n      opts = handler;\n      // If `event` is a map, call `on()` for each entry.\n      for (const eventName in event) {\n        this._addEventHandler(eventName, event[eventName], opts, once, passive);\n      }\n      return;\n    }\n\n    const {manager, events} = this;\n    // Alias to a recognized gesture as necessary.\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n\n    let eventRegistrar = events.get(eventAlias);\n    if (!eventRegistrar) {\n      eventRegistrar = new EventRegistrar(this);\n      events.set(eventAlias, eventRegistrar);\n      // Enable recognizer for this event.\n      eventRegistrar.recognizerName = EVENT_RECOGNIZER_MAP[eventAlias] || eventAlias;\n      // Listen to the event\n      if (manager) {\n        manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n    eventRegistrar.add(event, handler, opts, once, passive);\n    if (!eventRegistrar.isEmpty()) {\n      this._toggleRecognizer(eventRegistrar.recognizerName, true);\n    }\n  }\n\n  /**\n   * Process the event deregistration for a single event + handler.\n   */\n  _removeEventHandler(event, handler) {\n    if (typeof event !== 'string') {\n      // If `event` is a map, call `off()` for each entry.\n      for (const eventName in event) {\n        this._removeEventHandler(eventName, event[eventName]);\n      }\n      return;\n    }\n\n    const {events} = this;\n    // Alias to a recognized gesture as necessary.\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n\n    const eventRegistrar = events.get(eventAlias);\n\n    if (!eventRegistrar) {\n      return;\n    }\n\n    eventRegistrar.remove(event, handler);\n\n    if (eventRegistrar.isEmpty()) {\n      const {recognizerName} = eventRegistrar;\n      // Disable recognizer if no more handlers are attached to its events\n      let isRecognizerUsed = false;\n      for (const eh of events.values()) {\n        if (eh.recognizerName === recognizerName && !eh.isEmpty()) {\n          isRecognizerUsed = true;\n          break;\n        }\n      }\n      if (!isRecognizerUsed) {\n        this._toggleRecognizer(recognizerName, false);\n      }\n    }\n  }\n\n  /**\n   * Handle basic events using the 'hammer.input' Hammer.js API:\n   * Before running Recognizers, Hammer emits a 'hammer.input' event\n   * with the basic event info. This function emits all basic events\n   * aliased to the \"class\" of event received.\n   * See constants.BASIC_EVENT_CLASSES basic event class definitions.\n   */\n  _onBasicInput(event) {\n    const {srcEvent} = event;\n    const alias = BASIC_EVENT_ALIASES[srcEvent.type];\n    if (alias) {\n      // fire all events aliased to srcEvent.type\n      this.manager.emit(alias, event);\n    }\n  }\n\n  /**\n   * Handle events not supported by Hammer.js,\n   * and pipe back out through same (Hammer) channel used by other events.\n   */\n  _onOtherEvent(event) {\n    // console.log('onotherevent', event.type, event)\n    this.manager.emit(event.type, event);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}